# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FjeZ_3RaEZZ8T7U1a1aO-US5TNbL3RPd

Titanic
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

train=pd.read_csv('train.csv')

train.head()

#checking for null values

train.isnull()

sns.heatmap(train.isnull(),yticklabels=False, cbar=False,cmap='viridis')

sns.set_style('whitegrid')
sns.countplot(x='Survived', data=train)

sns.set_style('whitegrid')
sns.countplot(x='Survived', hue='Sex', data=train, palette='RdBu_r')

sns.set_style('whitegrid')
sns.countplot(x='Survived', hue='Pclass', data=train, palette='rainbow')

sns.displot(train['Age'].dropna(), kde=False, color='darkred', bins=40)

train['Age'].hist(bins=30, color='darkred', alpha=1) #alpha= percentage of data

sns.countplot(x="SibSp", data=train)

train['Fare'].hist(bins=40, color='green', figsize=(10,5))

"""Data Cleaning

To fill in missing data
"""

plt.figure(figsize=(12,7))
sns.boxplot(x='Pclass', y='Age', data=train, palette='winter')

def impute_age(cols):
  Age=cols[0]
  Pclass=cols[1]

  if pd.isnull(Age):
    if Pclass==1:
      return 37
    elif Pclass==2:
      return 29
    else:
      return 24
  else:
    return Age

train['Age']=train[['Age', 'Pclass']].apply(impute_age, axis=1)

sns.heatmap(train.isnull(),yticklabels=False, cbar=False,cmap='viridis')

train.drop('Cabin', axis=1, inplace=True)

train.head()



"""converting categories like sex into numbers """

sex= pd.get_dummies(train['Sex'], drop_first=True)
embark= pd.get_dummies(train['Embarked'], drop_first=True)

train.drop(['PassengerId', 'Name', 'Sex', 'Ticket', 'Embarked'], axis=1, inplace=True)

train=pd.concat([train,sex,embark], axis=1)

train.head()

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(train.drop('Survived', axis=1),
                                                    train['Survived'], test_size=0.5,
                                                    random_state=101)



"""Logistic Regression"""

from sklearn.linear_model import LogisticRegression

logmodel =LogisticRegression()
logmodel.fit(x_train,y_train)

predictions=logmodel.predict(x_test)

from sklearn.metrics import confusion_matrix

accuracy=confusion_matrix(y_test, predictions)

accuracy

from sklearn.metrics import accuracy_score

accuracy=accuracy_score(y_test,predictions)

accuracy

predictions

